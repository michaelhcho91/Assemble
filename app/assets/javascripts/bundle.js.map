{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/game.js","webpack:///./lib/game_view.js","webpack:///./lib/index.js","webpack:///./lib/piece.js","webpack:///./lib/player.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAA4B;;AAE5B,sEAAsE;;AAEtE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,8CAAK;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC,OAAO;AACzC,qBAAqB,qBAAqB;AAC1C;AACA,6BAA6B;AAC7B,+CAA+C;;AAE/C;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,WAAW;AAC9B;;AAEA,sBAAsB;;AAEtB;AACA;AACA;;AAEA;AACA,kBAAkB,WAAW;AAC7B;;AAEA;AACA,iCAAiC,WAAW;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uBAAuB,mBAAmB;AAC1C,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,8CAAK;AAC3B;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC,qBAAqB,qBAAqB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,wDAAwD;AACxD;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEe,mEAAI,E;;;;;;;;;;;;AC9TnB;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEe,uEAAQ,E;;;;;;;;;;;;AC3JvB;AAAA;AAAA;AAAA;AAAA;AAA8B;AACJ;AACS;AACP;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,+CAAM;AAC3B,KAAK,iCAAiC;AACtC,QAAQ,8CAAK;AACb;AACA,mBAAmB,6CAAI;AACvB;AACA;AACA;AACA;AACA,uBAAuB,kDAAQ;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,CAAC,E;;;;;;;;;;;;ACrDD;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,E;;;;;;;;;;;;ACvEpB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC,qBAAqB,OAAO;AAC5B,oEAAoE;AACpE;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;AAEe,qEAAM,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/index.js\");\n","import Piece from \"./piece\";\n\nconst SHAPES = \"IJLSZOTIJLSZOTIJLSZOTIJLSZOTIJLSZOTIJLSZOTIJLSZOT123\"; // lower chance for 123\n\nclass Game {\n  constructor(player, context, previewCtx) {\n    this.player = player;\n    this.context = context;\n    this.preview = previewCtx;\n\n    this.board = this.createBoard(10, 20);\n    this.startTime = 0;\n    this.dropInterval = 800;\n    this.gameOver = false;\n    this.isPlaying = false;\n    this.lastTime = 0;\n    this.musicPlaying = false;\n    this.nextPieceArray = [\n      new Piece().createPiece(\n        SHAPES[Math.floor(Math.random() * SHAPES.length)]\n      )\n    ];\n    this.paused = false;\n    this.wantShadow = true;\n  }\n\n  autoDrop(time = 0) {\n    const ctx = this.context;\n\n    if (this.paused) {\n      ctx.font = \"1.5px Arial, Helvetica, sans-serif\";\n      ctx.strokeStyle = \"#142143\";\n      ctx.lineWidth = 0.2;\n      ctx.strokeText(\"Paused\", 2.5, 6);\n      ctx.font = \"1.5px Arial, Helvetica, sans-serif\";\n      ctx.fillText(\"Paused\", 2.5, 6);\n    }\n    \n    const deltaTime = time - this.lastTime;\n    this.lastTime = time;\n    this.startTime += deltaTime;\n\n    if (this.startTime > this.dropInterval) {\n      this.manualDrop();\n    }\n  }\n\n  clearRows() {\n    let rowsCleared = 0;\n    const board = this.board;\n\n    for (let y = board.length - 1; y > 0; y--) {\n      for (let x = 0; x < board[y].length; x++) {\n        if (board[y].every(el => el !== 0)) {\n          board.splice(y, 1); // clear row\n          board.unshift(new Array(10).fill(0)); // add new empty row\n\n          rowsCleared += 1;\n        }\n      }\n    }\n\n    if (this.wantShadow) {\n      this.player.score += Math.pow(rowsCleared, rowsCleared) * (rowsCleared * 1000);\n    } else {\n      this.player.score += Math.pow(rowsCleared, rowsCleared) * (rowsCleared * 2000);\n    }\n  }\n\n  createBoard(width, height) {\n    const board = [];\n\n    for (let i = 0; i < height; i++) {\n      board.push(\n        new Array(width).fill(0)\n      );\n    }\n\n    return board;\n  }\n\n  draw(canvas) {\n    const ctx = this.context;\n    const preview = this.preview;\n    const nextPiece = this.nextPieceArray[0];\n    const player = this.player;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    preview.clearRect(0, 0, 120, 120);\n    \n    player.drawMatrix( // board\n      this.board, {x: 0, y: 0}, ctx\n    );\n\n    this.drawShadow(); // shadow\n    \n    player.drawMatrix( // current piece\n      player.matrix, player.position, ctx\n    );\n\n    player.drawMatrix( // next piece\n      nextPiece, {x: 1, y: 1}, preview\n    );\n    \n    player.drawMatrix( // preview\n      this.createBoard(14, 14), {x: 0, y: 0}, preview\n    );\n  }\n\n  drawShadow() {\n    if (!this.wantShadow) return;\n    \n    const shadow = this.player.matrix;\n    const position = this.player.position;\n    const ctx = this.context;\n\n    let i = 0;\n    while (i < this.board.length) {\n      const shadowPosition = {\n        x: position.x,\n        y: i\n      };\n      \n      if (i > position.y && this.isCollided(shadow, shadowPosition)) {\n        \n        for (let y = 0; y < shadow.length; y++) {\n          for (let x = 0; x < shadow[0].length; x++) {\n            if (shadow[y][x] !== 0) {\n              ctx.fillStyle = \"#BECEEF\";\n              ctx.fillRect(x + position.x + 0.2, y + i - 0.8, 0.6, 0.6);\n            }\n          }\n        }\n        \n        break;\n      }\n      i++;\n    }\n  }\n\n  generateNextPiece() {\n    const player = this.player;\n    const piece = new Piece();\n    const queue = this.nextPieceArray;\n\n    for (let i = 0; queue.length <= 4; i++) {\n      const shape = SHAPES[\n        Math.floor(SHAPES.length * Math.random())\n      ];\n      const newPiece = piece.createPiece(shape);\n\n      if (this.isUnique(newPiece)) {\n        queue.push(newPiece);\n      }\n    }\n    \n    player.matrix = queue.shift(); // set currentPiece to nextPiece\n    player.position.x = 3; // back to start position\n    player.position.y = 0;\n    \n    if (this.isCollided(player.matrix, player.position)) {\n      this.gameOver = true;\n      this.isPlaying = false;\n      this.playMusic();\n      const gameover = document.getElementById(\"gameover\");\n      gameover.volume = 0.1;\n      gameover.play();\n    }\n  }\n\n  hardDrop() {\n    const player = this.player;\n    \n    while (!this.isCollided(player.matrix, player.position)) {\n      player.position.y++;\n    }\n\n    player.position.y--;\n    this.startTime = 9999;\n  }\n  \n  isCollided(piece, position) {\n    // const piece = this.player.matrix;\n    // const position = player.position;\n\n    for (let y = 0; y < piece.length; y++) {\n      for (let x = 0; x < piece[0].length; x++) {\n        if (piece[y][x] !== 0) {\n          const xOffset = x + position.x;\n          const yOffset = y + position.y;\n\n          if (this.isOutOfBounds(xOffset, yOffset) || this.board[yOffset][xOffset] !== 0) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isOutOfBounds(x, y) {\n    if (x < 0 || x > 9 || y < 0 || y > 19) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isUnique(piece) {\n    const queue = this.nextPieceArray;\n\n    let result;\n    for (let i = 0; i < queue.length; i++) {\n      if (JSON.stringify(piece) === JSON.stringify(queue[i])) {\n        result = false;\n      } else {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n  \n  manualDrop() {\n    const player = this.player;\n    if (this.paused) return;\n    \n    player.position.y++;\n\n    if (this.isCollided(player.matrix, player.position)) {\n      player.position.y--;\n\n      this.setPiece(this.board, player);\n      this.clearRows();\n      this.generateNextPiece();\n      player.drawPoints();\n    }\n\n    this.startTime = 0;\n  }\n\n  moveLat(direction) {\n    const player = this.player;\n    \n    player.position.x += direction;\n\n    if (this.isCollided(player.matrix, player.position)) {\n      player.position.x -= direction;\n    }\n  }\n\n  playMusic() {\n    const audio = document.getElementById(\"bg-music\");\n\n    if (this.musicPlaying) {\n      audio.pause();\n      this.musicPlaying = false;\n    } else {\n      audio.volume = 0.3;\n      audio.play();\n      this.musicPlaying = true;\n    }\n  }\n\n  reset() {\n    this.gameOver = false;\n    this.startTime = 0;\n    this.dropInterval = 700;\n    this.player.resetScore();\n  }\n  \n  rotate(direction) {\n    const player = this.player;\n    const matrix = this.player.matrix;\n    const position = this.player.position;\n\n    player.transpose(matrix, direction);\n    \n    let offset = 1;\n    while (this.isCollided(player.matrix, player.position)) {\n      position.x += offset;\n\n      if (offset > 0) {\n        offset = -offset + 1;\n      } else {\n        offset = -offset + -1;\n      }\n    }\n  }\n\n  setPiece(board, player) {\n    const position = player.position;\n    const piece = player.matrix;\n    \n    piece.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) {\n          board[y + position.y][x + position.x] = value; // set piece value to board grid\n        }\n      });\n    });\n  }\n\n  start(gameView) {\n    if (!this.gameOver && !this.paused) {\n      this.board = this.createBoard(10, 20);\n      this.reset();\n      this.isPlaying = true;\n      this.playMusic();\n      gameView.update();\n    } else if (this.paused) {\n      this.paused = false;\n      gameView.update();\n    }\n  }\n}\n\nexport default Game;","class GameView {\n  constructor(game, canvas) {\n    this.game = game;\n    this.canvas = canvas;\n\n    this.update = this.update.bind(this);\n  }\n\n  bindControls() {\n    const game = this.game;\n    \n    document.addEventListener(\"keydown\", (e) => {\n      switch (e.keyCode) {\n        case 13: // enter to start\n          e.preventDefault();\n\n          if (!game.isPlaying || game.gameOver) {\n            game.gameOver = false;\n            game.start(this);\n          }\n          break;\n          \n        case 80: // p for pause\n          e.preventDefault();\n          \n          if (game.paused) {\n            game.start(this);\n            game.paused = false;\n          } else {\n            game.paused = true;\n          }\n          break;\n\n        case 77: // m for mute\n          e.preventDefault();\n\n          game.playMusic();\n          break;\n        \n        case 37: // left\n        case 65: // A\n          e.preventDefault();\n\n          if (!game.paused && !game.gameOver) {\n            game.moveLat(-1);\n          }\n          break;\n\n        case 39: // right\n        case 68: // D\n          e.preventDefault();\n\n          if (!game.paused && !game.gameOver) {\n            game.moveLat(1);\n          }\n          break;\n\n        case 40: // down\n        case 83: // S\n          e.preventDefault();\n\n          if (!game.paused && !game.gameOver) {\n            game.manualDrop();\n          }\n          break;\n\n        case 16: // SHIFT\n        case 38: // up\n          e.preventDefault();\n\n          if (!game.paused && !game.gameOver) {\n            game.rotate(1);\n          }\n          break;\n\n        case 87: // W\n        case 90: // Z for other direction\n          e.preventDefault();\n\n          if (!game.paused && !game.gameOver) {\n            game.rotate(-1);\n          }\n          break;\n\n        case 32: // space for hard drop\n          e.preventDefault();\n\n          if (!game.paused && game.isPlaying) {\n            game.hardDrop();\n          }\n          break;\n\n        case 9: // tab for shadow\n          e.preventDefault();\n\n          if (game.wantShadow && game.isPlaying) {\n            game.wantShadow = false;\n          } else {\n            game.wantShadow = true;\n          }\n          break;\n\n        default:\n          break;\n      }\n    });\n  }\n\n  update(time) {\n    const game = this.game;\n\n    if (!game.gameOver) {\n      game.draw(this.canvas);\n      game.autoDrop(time);\n      \n      if (game.paused) return;\n\n      if (game.player.score > 500000 && game.player.score < 1000000) {\n        game.dropInterval = 700;\n      } else if (game.player.score > 2000000 && game.player.score < 4000000) {\n        game.dropInterval = 500;\n      } else if (game.player.score > 5000000 && game.player.score < 7000000) {\n        game.dropInterval = 300;\n      } else if (game.player.score > 8000000 && game.player.score < 10000000) {\n        game.dropInterval = 150;\n      } else if (game.player.score > 10000000) {\n        game.dropInterval = 50;\n      }\n    } else {\n      game.draw(this.canvas);\n      game.context.font = \"1.5px Arial, Helvetica, sans-serif\";\n      game.context.strokeStyle = \"#142143\";\n      game.context.lineWidth = 0.2;\n      game.context.strokeText(\"Game Over!\", 1, 6);\n\n      game.context.font = \"1.5px Arial, Helvetica, sans-serif\";\n      game.context.fillText(\"Game Over!\", 1, 6);\n\n      game.context.font = \"0.8px Arial, Helvetica, sans-serif\";\n      game.context.strokeStyle = \"#142143\";\n      game.context.lineWidth = 0.2;\n      game.context.strokeText(\"ENTER to play again\", 1.25, 8);\n\n      game.context.font = \"0.8px Arial, Helvetica, sans-serif\";\n      game.context.fillText(\"ENTER to play again\", 1.25, 8);\n\n      game.gameOver = true;\n      game.isPlaying = false;\n      return;\n    }\n\n    requestAnimationFrame(this.update);\n  }\n}\n\nexport default GameView;","import Player from \"./player\";\nimport Game from \"./game\";\nimport GameView from \"./game_view\";\nimport Piece from \"./piece\";\n\nconst CANVAS_WIDTH = 300;\nconst CANVAS_HEIGHT = 600;\nconst PREVIEW_WIDTH = 150;\nconst PREVIEW_HEIGHT = 150;\nconst START_X_POS = 3;\nconst START_Y_POS = -1;\nconst SHAPES = \"IJLSZOTIJLSZOTIJLSZOTIJLSZOTIJLSZOT123\";\nconst shape = SHAPES[\n  Math.floor(SHAPES.length * Math.random())\n];\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  const preview = document.getElementById(\"next-piece\");\n  const previewCtx = preview.getContext(\"2d\");\n\n  canvas.width = CANVAS_WIDTH;\n  canvas.height = CANVAS_HEIGHT;\n  context.scale(30, 30);\n  preview.width = PREVIEW_WIDTH;\n  preview.height = PREVIEW_HEIGHT;\n  previewCtx.scale(30, 30);\n\n  const player = new Player(\n    { x: START_X_POS, y: START_Y_POS },\n    new Piece().createPiece(shape)\n  );\n  const game = new Game(\n    player,\n    context,\n    previewCtx\n  );\n  const gameView = new GameView(\n    game,\n    canvas\n  );\n\n  context.font = \"1px Arial, Helvetica, sans-serif\";\n  context.strokeStyle = \"#142143\";\n  context.lineWidth = 0.2;\n  context.strokeText(\"ENTER to play!\", 1.6, 6);\n  context.font = \"1px Arial, Helvetica, sans-serif\";\n  context.fillStyle = \"#F6F8F8\";\n  context.fillText(\"ENTER to play!\", 1.6, 6);\n\n\n  gameView.bindControls();\n});","class Piece {\n  constructor() {\n  }\n  \n  createPiece(shape) {\n    switch (shape) {\n      case \"T\":\n        return [\n          [0, 1, 0],\n          [1, 1, 1],\n          [0, 0, 0]\n        ];\n      case \"O\":\n        return [\n          [2, 2],\n          [2, 2]\n        ];\n      case \"L\":\n        return [\n          [0, 3, 0],\n          [0, 3, 0],\n          [0, 3, 3]\n        ];\n      case \"J\":\n        return [\n          [0, 4, 0],\n          [0, 4, 0],\n          [4, 4, 0]\n        ];\n      case \"I\":\n        return [\n          [0, 5, 0, 0],\n          [0, 5, 0, 0],\n          [0, 5, 0, 0],\n          [0, 5, 0, 0]\n        ];\n      case \"S\":\n        return [\n          [0, 6, 6],\n          [6, 6, 0],\n          [0, 0, 0]\n        ];\n      case \"Z\":\n        return [\n          [7, 7, 0],\n          [0, 7, 7],\n          [0, 0, 0]\n        ];\n      case \"1\":\n        return [\n          [0, 0, 0],\n          [0, 8, 0],\n          [0, 0, 0]\n        ];\n      case \"2\":\n        return [\n          [9, 0],\n          [0, 9]\n        ];\n      case \"3\":\n        return [\n          [10, 0, 0],\n          [0, 10, 0],\n          [0, 0, 10]\n        ];\n      default:\n        break;\n    }\n  }\n}\n\nexport default Piece;","const COLORS = [\n  null,\n  \"red\", // T\n  \"green\", // O\n  \"purple\", // L\n  \"blue\", // J\n  \"yellow\", // I\n  \"orange\", // S\n  \"pink\", // Z\n  \"black\", // 1\n  \"white\", // 2\n  \"silver\" // 3\n];\n\nclass Player {\n  constructor(position, matrix) {\n    this.position = position;\n    this.matrix = matrix;\n    this.score = 0;\n  }\n\n  drawPoints() {\n    const score = document.getElementById(\"score\");\n    score.innerText = this.score;\n  }\n  \n  drawMatrix(matrix, position, context) {\n    matrix.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) { // color pieces\n          context.strokeStyle = \"#BECEEF\";\n          context.lineWidth = 0.08;\n          context.strokeRect(x + position.x, y + position.y, 1, 1);\n          context.fillStyle = COLORS[value];\n          context.fillRect(x + position.x, y + position.y, 1, 1);\n        } else if (value === 0) { // draw board grid\n          context.strokeStyle = \"#BECEEF\";\n          context.lineWidth = 0.04;\n          context.strokeRect(x + position.x, y + position.y, 1, 1);\n        }\n      });\n    });\n  }\n\n  resetScore() {\n    const gamestart = document.getElementById(\"gamestart\");\n    gamestart.volume = 0.3;\n    gamestart.play();\n    \n    this.score = 0;\n    this.drawPoints();\n  }\n\n  transpose(matrix, direction) {\n    for (let y = 0; y < matrix.length; y++) {\n      for (let x = 0; x < y; x++) {\n        [matrix[x][y], matrix[y][x]] = [matrix[y][x], matrix[x][y]]; // transpose\n      }\n    }\n\n    if (direction > 0) { // rotate other direction\n      matrix.forEach(row => {\n        row.reverse();\n      });\n    } else {\n      matrix.reverse();\n    }\n  }\n}\n\nexport default Player;"],"sourceRoot":""}